<!DOCTYPE html>
<html>
<head>
    <title>Camera Screenshot</title>
    <style>
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            margin-right: 10px;
        }

        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div class="maindiv" style="display: flex;justify-content: space-around;">
       <video id="video" autoplay playsinline></video>
        <div style="margin-left: 7px;;">
            <canvas id="canvas"></canvas>
        </div>
    </div>
    <div class="controls">
        <button id="takePictureBtn">Take Picture</button>
        <button id="switchCameraBtn">Switch Camera</button>
        <button id="acceptPictureBtn">Accept</button>
        <button id="clearPictureBtn">Clear</button>
    </div>

    <script>
        var width = 320;
        var height = 0;
        var streaming = false;
        var video = document.getElementById("video");
        var canvas = document.getElementById("canvas");
        var takePictureBtn = document.getElementById("takePictureBtn");
        var acceptPictureBtn = document.getElementById("acceptPictureBtn");
        var clearPictureBtn = document.getElementById("clearPictureBtn");
        var switchCameraBtn = document.getElementById("switchCameraBtn");
        var currentFacingMode = "environment";

        function startup() {
            getMediaDevices();
            videoEventListener();
            takePictureBtnEventListener();
            clearPicture();
        }

        function getMediaDevices() {
          if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            // For iOS devices
            if (navigator.mediaDevices.enumerateDevices) {
              navigator.mediaDevices.enumerateDevices()
                .then(function (devices) {
                  var videoDevices = devices.filter(function (device) {
                    return device.kind === 'videoinput';
                  });
        
                  if (videoDevices.length > 1) {
                    currentFacingMode = 'environment';
                  }
                })
                .catch(function (error) {
                  console.log("Error occurred: " + error);
                });
            }
        
            var videoConstraints = { video: { facingMode: currentFacingMode } };
            navigator.mediaDevices.getUserMedia(videoConstraints)
              .then(function (stream) {
                video.srcObject = stream;
                video.play();
              })
              .catch(function (error) {
                console.log("Error occurred: " + error);
              });
          } else {
            alert('getUserMedia is not supported');
          }
        }

        function videoEventListener() {
            video.addEventListener("canplay", function (event) {
                if (!streaming) {
                    height = video.videoHeight / (video.videoWidth / width);
                    if (isNaN(height)) {
                        height = width / (4 / 3);
                    }
                    video.setAttribute("width", width);
                    video.setAttribute("height", height);
                    canvas.setAttribute("width", width);
                    canvas.setAttribute("height", height);
                    streaming = true;
                }
            }, false);
        }

        switchCameraBtn.addEventListener("click", function (event) {
            switchCamera();
        }, false);

        function switchCamera() {
            currentFacingMode = currentFacingMode === "environment" ? "user" : "environment";
            restartStream();
        }

        function restartStream() {
            var stream = video.srcObject;
            var tracks = stream.getTracks();
            tracks.forEach(function (track) {
                track.stop();
            });

            var videoConstraints = { video: { facingMode: currentFacingMode } };
            navigator.mediaDevices.getUserMedia(videoConstraints)
                .then(function (stream) {
                    video.srcObject = stream;
                    video.play();
                })
                .catch(function (error) {
                    console.log("Error occurred: " + error);
                });
        }

        function takePictureBtnEventListener() {
            takePictureBtn.addEventListener("click", function (event) {
                event.preventDefault();
                takePicture();
            }, false);
        }

        function clearPicture() {
            var context = canvas.getContext("2d");
            context.fillStyle = "#AAA";
            context.fillRect(0, 0, canvas.width, canvas.height);
            var data = canvas.toDataURL("image/png");
        }

        function takePicture() {
            var context = canvas.getContext("2d");
            if (width && height) {
                canvas.width = width;
                canvas.height = height;
                context.drawImage(video, 0, 0, width, height);
                var data = canvas.toDataURL("image/png");
            } else {
                clearPicture();
            }
        }

        function dataURItoBlob(dataURI) {
            var byteString = atob(dataURI.split(",")[1]);
            var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
            var ab = new ArrayBuffer(byteString.length);
            var ia = new Uint8Array(ab);
            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            return new Blob([ab], { type: mimeString });
        }

        clearPictureBtn.addEventListener("click", function (event) {
            clearPicture();
        });

        acceptPictureBtn.addEventListener("click", function (event) {
            var data = canvas.toDataURL("image/png");
            var blob = dataURItoBlob(data);
            console.log(blob); // do something with the blob if needed
            alert("G Saad Bhai aapki script");
        });

        window.addEventListener("load", startup, false);
    </script>
</body>
</html>
